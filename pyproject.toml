[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "california-housing-mlops"
version = "0.1.0"
description = "Complete MLOps pipeline for California Housing price prediction with GPU acceleration"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["mlops", "machine-learning", "gpu", "cuda", "mlflow", "fastapi", "xgboost", "pytorch"]

dependencies = [
    "pandas>=2.2.0",
    "numpy>=2.1.0",
    "scikit-learn>=1.5.0",
    "scipy>=1.14.0",
    "torch>=2.5.0",
    "xgboost>=2.1.0",
    "lightgbm>=4.5.0",
    "mlflow>=2.18.0",
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "prometheus-client>=0.21.0",
    "python-dotenv>=1.0.0",
    "requests>=2.32.0",
    "rich>=13.9.0",
    "loguru>=0.7.0",
    "click>=8.1.0",
    "tqdm>=4.67.0",
]

[project.optional-dependencies]
gpu = [
    "cuml-cu12>=24.12.0",
    "cudf-cu12>=24.12.0",
    "cupy-cuda12x>=13.3.0",
    "nvidia-ml-py>=12.560.0",
]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "black>=24.10.0",
    "flake8>=7.1.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.0",
    "jupyter>=1.1.0",
    "httpx>=0.28.0",
]
dvc = [
    "dvc[gs]>=3.56.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/california-housing-mlops"
Documentation = "https://github.com/yourusername/california-housing-mlops#readme"
Repository = "https://github.com/yourusername/california-housing-mlops"
"Bug Tracker" = "https://github.com/yourusername/california-housing-mlops/issues"

[project.scripts]
housing-predict = "src.api.cli:main"
housing-train = "src.models.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.json", "*.toml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "cuml.*",
    "cudf.*",
    "cupy.*",
    "xgboost.*",
    "lightgbm.*",
    "mlflow.*",
    "nvidia_ml_py.*",
    "dvc.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 